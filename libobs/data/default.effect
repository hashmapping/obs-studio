uniform float4x4 ViewProj;
uniform texture2d image;

sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct FragTexPos {
	float2 uv  : TEXCOORD0;
	float4 pos : POSITION;
};

struct FragTex {
	float2 uv : TEXCOORD0;
};

FragTexPos VSDefault(VertData vert_in)
{
	FragTexPos vert_out;
	vert_out.uv  = vert_in.uv;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	return vert_out;
}

FragTexPos VSTexPos(uint id : VERTEXID)
{
	float idHigh = float(id >> 1);
	float idLow = float(id & uint(1));

	float x = idHigh * 4.0 - 1.0;
	float y = idLow * 4.0 - 1.0;

	float u = idHigh * 2.0;
	float v = obs_glsl_compile ? (idLow * 2.0) : (1.0 - idLow * 2.0);

	FragTexPos vert_out;
	vert_out.uv = float2(u, v);
	vert_out.pos = float4(x, y, 0.0, 1.0);
	return vert_out;
}

float4 PSDrawBare(FragTex frag_in) : TARGET
{
	return image.Sample(def_sampler, frag_in.uv);
}

float4 PSDrawAlphaDivide(FragTex frag_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, frag_in.uv);
	float alpha_i = max(0.0, 1.0 / rgba.a); // convert NaN to 0
	rgba.rgb = rgba.rgb * alpha_i;
	return rgba;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare(frag_in);
	}
}

technique DrawFullscreen
{
	pass
	{
		vertex_shader = VSTexPos(id);
		pixel_shader  = PSDrawBare(frag_in);
	}
}

technique DrawAlphaDivide
{
	pass
	{
		vertex_shader = VSTexPos(id);
		pixel_shader  = PSDrawAlphaDivide(frag_in);
	}
}
