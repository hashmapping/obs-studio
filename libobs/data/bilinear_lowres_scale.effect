/*
 * bilinear low res scaling, samples 8 pixels of a larger image to scale to a
 * low resolution image below half size
 */

uniform float4x4 ViewProj;
uniform texture2d image;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct FragTexPos {
	float2 uv  : TEXCOORD0;
	float4 pos : POSITION;
};

struct FragTex {
	float2 uv : TEXCOORD0;
};

FragTexPos VSDefault(VertData v_in)
{
	FragTexPos vert_out;
	vert_out.uv  = v_in.uv;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return vert_out;
}

FragTexPos VSTexPos(uint id : VERTEXID)
{
	float idHigh = float(id >> 1);
	float idLow = float(id & uint(1));

	float x = idHigh * 4.0 - 1.0;
	float y = idLow * 4.0 - 1.0;

	float u = idHigh * 2.0;
	float v = obs_glsl_compile ? (idLow * 2.0) : (1.0 - idLow * 2.0);

	FragTexPos vert_out;
	vert_out.uv = float2(u, v);
	vert_out.pos = float4(x, y, 0.0, 1.0);
	return vert_out;
}

float4 pixel(float2 uv)
{
	return image.Sample(textureSampler, uv);
}

float4 DrawLowresBilinear(float2 uv)
{
	float2 stepxy  = float2(ddx(uv.x), ddy(uv.y));
	float2 stepxy1 = stepxy * 0.0625;
	float2 stepxy3 = stepxy * 0.1875;
	float2 stepxy5 = stepxy * 0.3125;
	float2 stepxy7 = stepxy * 0.4375;

	// Simulate Direct3D 8-sample pattern
	float4 out_color;
	out_color  = pixel(uv + float2( stepxy1.x, -stepxy3.y));
	out_color += pixel(uv + float2(-stepxy1.x,  stepxy3.y));
	out_color += pixel(uv + float2( stepxy5.x,  stepxy1.y));
	out_color += pixel(uv + float2(-stepxy3.x, -stepxy5.y));
	out_color += pixel(uv + float2(-stepxy5.x,  stepxy5.y));
	out_color += pixel(uv + float2(-stepxy7.x, -stepxy1.y));
	out_color += pixel(uv + float2( stepxy3.x,  stepxy7.y));
	out_color += pixel(uv + float2( stepxy7.x, -stepxy7.y));
	return out_color * 0.125;
}

float4 PSDrawLowresBilinearRGBA(FragTex f_in) : TARGET
{
	return DrawLowresBilinear(f_in.uv);
}

float4 PSDrawLowresBilinearRGBADivide(FragTex f_in) : TARGET
{
	float4 rgba = DrawLowresBilinear(f_in.uv);
	float alpha_i = max(0.0, 1.0 / rgba.a); // convert NaN to 0
	rgba.rgb = rgba.rgb * alpha_i;
	return rgba;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLowresBilinearRGBA(f_in);
	}
}

technique DrawFullscreen
{
	pass
	{
		vertex_shader = VSTexPos(id);
		pixel_shader  = PSDrawLowresBilinearRGBA(f_in);
	}
}

technique DrawAlphaDivide
{
	pass
	{
		vertex_shader = VSTexPos(id);
		pixel_shader  = PSDrawLowresBilinearRGBADivide(f_in);
	}
}

